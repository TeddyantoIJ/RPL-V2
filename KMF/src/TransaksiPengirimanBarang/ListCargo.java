/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TransaksiPengirimanBarang;

import MainMenu.MainMenuCS;
import connection.DBConnect;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SATRIA ADJIE PRAYOGA
 */
public class ListCargo extends javax.swing.JFrame {

    private DefaultTableModel model;
    DBConnect connection = new DBConnect();
    int i;
    String KantorCabang = "KMF JKT";
    String idBagging = "";
    String Bandara = "";
    String idPemesanan = "";
    String id_cs = "";
    
    /**
     * Creates new form ListCargo
     */
    public ListCargo() {
        initComponents();
        model = new DefaultTableModel();
        
        tblCargo.setModel(model);
        addColumn();
        loadData();
    }
    
    public ListCargo(String id,String KantorCabang) {
        initComponents();
        model = new DefaultTableModel();
        this.KantorCabang = KantorCabang;
        this.id_cs = id;
        tblCargo.setModel(model);
        addColumn();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtIdCargo = new javax.swing.JTextField();
        btnCari = new javax.swing.JButton();
        btnSelesai = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCargo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("List Cargo");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setText("Id Cargo");

        btnCari.setText("Cari");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        btnSelesai.setText("Selesai");
        btnSelesai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelesaiActionPerformed(evt);
            }
        });

        tblCargo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCargo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCargoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCargo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(420, 420, 420)
                .addComponent(jLabel1))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addGap(26, 26, 26)
                .addComponent(txtIdCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(850, 850, 850)
                .addComponent(btnSelesai))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtIdCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnSelesai))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addRiwayat(){
        Format formatter = new SimpleDateFormat("yyyyMMdd");
        Format formatterTime = new SimpleDateFormat("hh:mm:ss");
        
            try
            {
                DBConnect c = new DBConnect();
                String query = "INSERT INTO Riwayat VALUES (?,?,?,?)";
                     c.pstat = c.conn.prepareStatement(query);
                     c.pstat.setString(1, formatter.format(new Date()));
                     c.pstat.setString(2, formatterTime.format(new Date()));
                     c.pstat.setString(3, "Berangkat dari bandara" + Bandara);
                     c.pstat.setString(4, idPemesanan);

                      //insert ke dalam database
                c.pstat.executeUpdate();
                c.pstat.close();
                //JOptionPane.showMessageDialog(this, "insert data Baggin berhasil");
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,"Terjadi error pada saat insert data bagging :" + e);
            }        
    }
    private String getIDKantor(String in) {
        DBConnect connection = new DBConnect();
        try {
            connection.stat = connection.conn.createStatement();
            String query = "select kode_kantor_cabang from KantorCabang where nama_kantor = '" + in + "'";
            connection.result = connection.stat.executeQuery(query);
            String output = null;
            while (connection.result.next()) {

                output = (connection.result.getString("kode_kantor_cabang"));

            }
            connection.stat.close();
            connection.result.close();
            return output;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error!!\n" + e.toString());
        }
        return null;
    }
    public void CariData()
    {
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged(); 
        
        try{
            DBConnect connection = new DBConnect();
            connection.stat = connection.conn.createStatement();
            String query = "SELECT * FROM CargoManifest AS C\n" +
                    "INNER JOIN detailCargo AS d ON c.id_cargo_manifest = d.id_cargo_manifest\n" +
                    "INNER JOIN detailBagging AS b ON d.id_bagging = b.id_bagging\n" +
                    "INNER JOIN Connote AS o ON o.id_connote = b.id_connote\n" +
                    "WHERE C.id_cargo_manifest='" + txtIdCargo.getText() +
                    "' AND o.kantor_cabang='" + getIDKantor(KantorCabang)+"'";
            System.out.println(query);
            connection.result = connection.stat.executeQuery(query);
            
            while(connection.result.next()){
                Object[] obj = new Object[13];
                obj[0] = connection.result.getString("id_cargo_manifest");
                obj[1] = connection.result.getString("nomor_registrasi");
                obj[2] = connection.result.getString("nomor_penerbangan");
                obj[3] = connection.result.getString("kota_asal");
                obj[4] = connection.result.getString("kota_tujuan");
                obj[5] = connection.result.getString("tanggal_pemberangkatan");
                obj[6] = connection.result.getString("waktu_pemberangkatan");
                obj[7] = connection.result.getString("tanggal_sampai");
                obj[8] = connection.result.getString("waktu_sampai");
                obj[9] = connection.result.getString("jumlah_kantong");
                obj[10] = connection.result.getString("berat_barang_total");
                obj[11] = connection.result.getString("total_biaya");
                obj[12] = connection.result.getString("status");
                
                model.addRow(obj);
                i = 1;
            }
            if(model.getRowCount() == 0){
                JOptionPane.showMessageDialog(this, "Data Cargo tidak ditemukan");
                i = 0;
            }
            connection.stat.close();
            connection.result.close();
        }catch(Exception ex){
            System.out.println("Terjadi error saat load data: " + ex);
        }
    }
    
    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
        // TODO add your handling code here:
        CariData();
    }//GEN-LAST:event_btnCariActionPerformed

    private void btnSelesaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelesaiActionPerformed
        // TODO add your handling code here:
        MainMenuCS cs = new MainMenuCS(id_cs, KantorCabang);
    }//GEN-LAST:event_btnSelesaiActionPerformed

    private void tblCargoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCargoMouseClicked
        // TODO add your handling code here:
        String query;
        
        
        int i = tblCargo.getSelectedRow();
        if(i != -1){
            txtIdCargo.setText(tblCargo.getValueAt(i, 0).toString());
        }
        String IdCargo = txtIdCargo.getText();
        
        
        if(IdCargo.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Textbox id masih kosong!");
        }
        else
        {
            try{
                connection.stat = connection.conn.createStatement();
                query = "SELECT * FROM CargoManifest AS C\n" +
                            "INNER JOIN detailCargo AS d ON c.id_cargo_manifest = d.id_cargo_manifest\n" +
                            "INNER JOIN detailBagging AS b ON d.id_bagging = b.id_bagging\n" +
                            "INNER JOIN Connote AS O ON O.id_connote = d.id_connote\n" +
                            "WHERE C.id_cargo_manifest = '" + txtIdCargo.getText() + "'";
                System.out.println(query);
                connection.result = connection.stat.executeQuery(query);
                while (connection.result.next()) {
                    idBagging = (connection.result.getString("id_bagging"));
                    Bandara = (connection.result.getString("kota_asal"));
                    idPemesanan = (connection.result.getString("id_pemesanan"));
                }
            }
            catch (Exception e){
                    System.out.println("Terjadi error saat mencari id bagging: " + e.toString());
            }
            int jawab = JOptionPane.showOptionDialog(this, 
                "Konfirmasi Cargo",  
                "Konfirmasi", 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, null, null);
            if(jawab == JOptionPane.YES_OPTION){
                try{
                query = "UPDATE detailBagging SET status_barang_bagging = 'Berangkat dari bandara "
                        + Bandara + "' WHERE id_bagging='"
                        + idBagging + "'";

                connection.pstat = connection.conn.prepareStatement(query);

                connection.pstat.executeUpdate();
                JOptionPane.showMessageDialog(this, "Status barang sudah diupdate");
                }
                catch (Exception e){
                    System.out.println("Terjadi error saat update status Cargo: " + e.toString());
                }
                
                addRiwayat();
            }
        }
    }//GEN-LAST:event_tblCargoMouseClicked

    public void addColumn()
    {
        model.addColumn("Id Cargo");
        model.addColumn("No Registrasi");
        model.addColumn("No Penerbangan");
        model.addColumn("Kota Asal");
        model.addColumn("Kots Tujuan");
        model.addColumn("Tanggal Pemberangkatan");
        model.addColumn("Waktu Pemberangkatan");
        model.addColumn("Tanggal Sampai");
        model.addColumn("Waktu Sampai");
        model.addColumn("Jumlah Kantong");
        model.addColumn("Berat Barang Total");
        model.addColumn("Total Biaya");
        model.addColumn("Status");
    }
    
    public void loadData()
    {
        model.getDataVector().removeAllElements();
        
        model.fireTableDataChanged();
        
        try{
            connection.stat = connection.conn.createStatement();
//            String query = "SELECT C.* FROM CargoManifest AS C\n" +
//                    "INNER JOIN detailCargo AS d ON c.id_cargo_manifest = d.id_cargo_manifest\n" +
//                    "INNER JOIN detailBagging AS b ON d.id_bagging = b.id_bagging\n" +
//                    "INNER JOIN Connote AS o ON o.id_connote = b.id_connote\n" +
//                    "WHERE o.kantor_cabang='" + KantorCabang + "'";
            String query = "SELECT * FROM CargoManifest";
            connection.result = connection.stat.executeQuery(query);
            
            while(connection.result.next()){
                Object[] obj = new Object[13];
                obj[0] = connection.result.getString("id_cargo_manifest");
                obj[1] = connection.result.getString("nomor_registrasi");
                obj[2] = connection.result.getString("nomor_penerbangan");
                obj[3] = connection.result.getString("kota_asal");
                obj[4] = connection.result.getString("kota_tujuan");
                obj[5] = connection.result.getString("tanggal_pemberangkatan");
                obj[6] = connection.result.getString("waktu_pemberangkatan");
                obj[7] = connection.result.getString("tanggal_sampai");
                obj[8] = connection.result.getString("waktu_sampai");
                obj[9] = connection.result.getString("jumlah_kantong");
                obj[10] = connection.result.getString("berat_barang_total");
                obj[11] = connection.result.getString("total_biaya");
                obj[12] = connection.result.getString("status");
                model.addRow(obj);
            }
            connection.stat.close();
            connection.result.close();
        }catch(Exception e){
            System.out.println("Terjadi error saat load data cargo: " + e);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListCargo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListCargo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListCargo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListCargo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListCargo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnSelesai;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblCargo;
    private javax.swing.JTextField txtIdCargo;
    // End of variables declaration//GEN-END:variables
}
